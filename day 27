Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].


  class Solution {
public:
int merge(vector<int>& a,int start,int mid,int end)
{
    int c=0;
    vector<int>temp;
    int left=start,right=mid+1,index=0;
    int i;
    for(i=left;i<=mid;i++)
    {
        while(right<=end && (long long) a[i]>2* (long long)a[right])
        right++;

        c+=right-(mid+1);
    }
    right=mid+1;
    while(left<=mid && right<=end)
    {
        if(a[left]<a[right])
        temp.push_back(a[left++]);

        else
         temp.push_back(a[right++]);
    }
     while(left<=mid)
      temp.push_back(a[left++]);
     while(right<=end)
     temp.push_back(a[right++]);

      for (int i = 0; i < temp.size(); i++) 
      {
        a[start + i] = temp[i];
    }
return c;
}
int mergesort(vector<int>& a,int start,int end)
{
    int c=0;
    if(start<end)
    {
        int mid=start+(end-start)/2;
        c+=mergesort(a,start,mid);
        c+=mergesort(a,mid+1,end);

        c+=merge(a,start,mid,end);
    }
    return c;
}
    int reversePairs(vector<int>& a) {
        int c= mergesort(a,0,a.size()-1);
        return c;
    }
};

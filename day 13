There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

  class Solution {
public:
    int search(vector<int>& a, int t) {
        int start=0,end=a.size()-1,mid;
        while(start<=end)
        {
            mid=start+(end-start)/2;
            if(a[mid]==t)
            return mid;

            //left side
            if(a[mid]>=a[0])
            {
                if(t>=a[start]&&t<a[mid])
                end=mid-1;
                else
                start=mid+1;
            }
            else
            {
                if(t>a[mid]&&t<=a[end])
                start=mid+1;
                else
                end=mid-1;
            }
        }
        return -1;
    }
};

You are given an integer mountain array arr of length n where the values increase to a peak element and then decrease.

Return the index of the peak element.

Your task is to solve it in O(log(n)) time complexity.


  class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
         int left = 0, right = arr.size() - 1;

    while (left < right) {
        int mid = left + (right - left) / 2;

        if (arr[mid] < arr[mid + 1]) {
            // Peak is in the right half
            left = mid + 1;
        } else {
            // Peak is in the left half or at mid
            right = mid;
        }
    }

    // When left == right, we have found the peak
    return left;
    }
};

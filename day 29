Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 class Solution {
public:


void backtrack(vector<int>& candidates, int target, int start, vector<int>& current, vector<vector<int>>& result) {
        // Base case: if target is 0, add the current combination to the result
        if (target == 0) {
            result.push_back(current);
            return;
        }
        
        for (int i = start; i < candidates.size(); i++) {
            // Skip duplicates
            if (i > start && candidates[i] == candidates[i - 1]) continue;
            
            // If the current number exceeds the target, break early
            if (candidates[i] > target) break;
            
            // Include the current number in the combination
            current.push_back(candidates[i]);
            // Recur with the remaining target and the next index
            backtrack(candidates, target - candidates[i], i + 1, current, result);
            // Backtrack: remove the last added number
            current.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
          vector<vector<int>> result;
        vector<int> current;
        
        // Sort the candidates to handle duplicates and allow early termination
        sort(candidates.begin(), candidates.end());
        
        // Start backtracking
        backtrack(candidates, target, 0, current, result);
        
        return result;
    }
};
